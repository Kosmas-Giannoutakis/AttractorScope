TITLE:: AttractorScope
summary:: Real-time multi-dimensional phase-space visualization of audio signals
categories:: GUI, Analysis, Visualization
related:: Classes/Stethoscope, Classes/FreqScope, Classes/Bus, Classes/Buffer

DESCRIPTION::
AttractorScope is a real-time visualization tool that transforms audio or control-rate signals into dynamic, multi-dimensional strong::phase-space embeddings::. By constructing delayed coordinate representations of input signals in 2D through 6D space, it provides an intuitive way to observe the underlying structure, periodicity, and complexity of sound signals through the lens of nonlinear dynamics and chaos theory.

This approach is based on strong::delay coordinate embedding::, a method introduced by Packard et al. (1980) and formalized by Takens (1981). In this technique, a single time series is reconstructed in an N-dimensional phase space using time-delayed versions of the signal:

teletype::
x(t) = [s(t), s(t - τ), s(t - 2τ), ..., s(t - (N-1)τ)]
::

where code::s(t):: is the signal, code::τ:: is the delay time, and code::N:: is the embedding dimension. This process reveals the attractor geometry of the underlying dynamical system, allowing visual analysis of periodic, quasi-periodic, and chaotic behaviors.

LIST::
## strong::Multi-dimensional visualization:: - Display signals in 2D through 6D reconstructed phase space
## strong::Multiple rendering styles:: - Lines, Points, Smooth, Glow, Ribbon, and Heat Map visualization modes
## strong::Dynamic color schemes:: - Static colors, Rainbow, Velocity-based, Distance-based, and Curvature-based coloring
## strong::Interactive controls:: - Full GUI with sliders, keyboard shortcuts, and mouse-based rotation
## strong::Real-time rotation:: - Continuous or manual rotation through any dimensional plane
## strong::Performance optimized:: - Adaptive resolution and cached rendering for smooth real-time visualization
::

strong::Keyboard Shortcuts::

table::
## strong::Key:: || strong::Function::
## code::2::–code::6:: || Set dimension directly (2D, 3D, 4D, 5D, 6D)
## code::c:: || Cycle through color schemes
## code::s:: || Cycle through drawing styles
## code::a:: || Toggle auto-rotation on/off
## code::r:: || Reset rotation and zoom to defaults
## code::m:: || Toggle window size (small/large)
## code::[:: / code::]:: || Decrease / Increase delay time
## code::{:: / code::}:: || Decrease / Increase trail length
## code::<:: / code::>:: || Decrease / Increase resolution
## code::,:: / code::.:: || Decrease / Increase rotation speed
## code::-:: / code::=:: || Decrease / Increase zoom
::

strong::Mouse Interaction::: Click and drag to manually rotate the attractor in 3D and higher dimensions. Horizontal drag rotates around the Y-axis, vertical drag rotates around the X-axis. Auto-rotation automatically pauses when you click to drag.

strong::Understanding Delay Time::: The code::delayTime1:: parameter is crucial for shaping the attractor. Too small (< 0.001s) causes points to collapse together. The sweet spot (0.005–0.02s) reveals rich attractor structure. Too large (> 0.05s) spreads points too far apart. Rule of thumb: For a signal at frequency code::f::, try code::delayTime1:: in the range code::1/(4*f):: to code::1/f::.

strong::References::
LIST::
## Packard, N. H., Crutchfield, J. P., Farmer, J. D., & Shaw, R. S. (1980). emphasis::Geometry from a time series.:: Physical Review Letters, 45(9), 712–716.
## Takens F. (1981). emphasis::Detecting strange attractors in turbulence.:: In Dynamical Systems and Turbulence, Springer-Verlag.
## Kantz, H., & Schreiber, T. (2004). emphasis::Nonlinear Time Series Analysis:: (2nd ed.). Cambridge University Press.
::

CLASSMETHODS::

METHOD:: new
Creates a new AttractorScope instance and opens its GUI window. strong::Note::: AttractorScope only works with local servers, not remote servers.
argument:: server
The link::Classes/Server:: to use. Defaults to code::Server.default::.
argument:: index
The bus index to visualize, or a link::Classes/Bus:: object directly. Can be an audio or control bus. Default: 0.
argument:: bufsize
Internal buffer size for storing samples. Must be at least 128. Default: 4096.
argument:: delayTime1
The base delay time in seconds (τ). This is the fundamental parameter that shapes the attractor. The scope uses five delay times: τ, 2τ, 3τ, 4τ, 5τ. Range: 0.0001 to 0.05 seconds. Default: 0.01.
argument:: trailLength
Number of points visible in the trail. Higher values show more history but may impact performance. Range: 10 to 5000. Default: 500.
argument:: resolution
Points computed per second. Higher values provide smoother trajectories but use more CPU. Range: 100 to 2000. Default: 800.
argument:: dimension
The embedding dimension (number of delayed coordinates). code::2:: for classic 2D Lissajous-style figures, code::3:: for full 3D attractor visualization, code::4:: through code::6:: for higher-dimensional projections. Range: 2 to 6. Default: 3.
argument:: rotationSpeed
Multiplier for automatic rotation speed. Range: 0.1 to 5.0. Default: 1.0.
argument:: zoom
Initial zoom level. Range: 0.25 to 4.0. Default: 1.0.
argument:: rate
Bus rate, either code::\audio:: or code::\control::. Default: code::\audio::.
argument:: view
An optional parent link::Classes/View:: to embed the scope into. If code::nil::, creates a standalone window.


EXAMPLES::

code::
// 1. Simple sine wave test

(
{ SinOsc.ar(440) * 0.5 }.play;

// Create an AttractorScope on audio bus 0
a = AttractorScope(s, 0);
)

a.quit;
::

code::
//2. Chaotic Feedback Oscillator

(
// Noisy phase self-modulation
x = {
    var fb = LocalIn.ar(2);
    var freq = 120;
    var mod = SinOsc.kr(0.05).range(0, 2.5);
    var sig = SinOsc.ar(freq, fb * mod, 1, fb * 0.5);
    sig = LeakDC.ar(sig);
    LocalOut.ar(sig);
    sig
}.play;

// Visualize with custom parameters
a = AttractorScope(
    server: s,
    index: 0,
    dimension: 3,
    trailLength: 1000,
    resolution: 1000,
    delayTime1: 0.01
);
)

x.free;
a.quit;
::

code::
// 3. Polyrhythmic harmonic series with synchronized modulation

(
x = {
    var fundamental = 60;
    var baseModRate = 1/8;  // Base modulation rate in Hz
    var sig = Mix.fill(16, { |i|
        var harmonic = i + 1;
        var freq = fundamental * harmonic;
        var modRate = baseModRate * harmonic;  // Each harmonic modulated proportionally faster
        var ampMod = SinOsc.kr(modRate).range(0, 1);  // Amplitude modulator
        var amp = (1 / harmonic) * ampMod;  // Diminishing amplitude with modulation
        SinOsc.ar(freq, 0, amp)
    });
    sig ! 2
}.play;

// Visualize in 4D with longer trail
a = AttractorScope(
    server: s,
    index: 0,
    dimension: 4,
    trailLength: 3000,
    resolution: 2000,
    delayTime1: 0.015
);
)

x.free;
w.close;
::